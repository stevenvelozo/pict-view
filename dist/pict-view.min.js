"use strict";!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).PictView=e()}}((function(){return function e(i,t,s){function o(r,a){if(!t[r]){if(!i[r]){var h="function"==typeof require&&require;if(!a&&h)return h(r,!0);if(n)return n(r,!0);var l=new Error("Cannot find module '"+r+"'");throw l.code="MODULE_NOT_FOUND",l}var c=t[r]={exports:{}};i[r][0].call(c.exports,(function(e){return o(i[r][1][e]||e)}),c,c.exports,e,i,t,s)}return t[r].exports}for(var n="function"==typeof require&&require,r=0;r<s.length;r++)o(s[r]);return o}({1:[function(e,i,t){i.exports={name:"fable-serviceproviderbase",version:"3.0.15",description:"Simple base classes for fable services.",main:"source/Fable-ServiceProviderBase.js",scripts:{start:"node source/Fable-ServiceProviderBase.js",test:"npx mocha -u tdd -R spec",tests:"npx mocha -u tdd --exit -R spec --grep",coverage:"npx nyc --reporter=lcov --reporter=text-lcov npx mocha -- -u tdd -R spec",build:"npx quack build"},mocha:{diff:!0,extension:["js"],package:"./package.json",reporter:"spec",slow:"75",timeout:"5000",ui:"tdd","watch-files":["source/**/*.js","test/**/*.js"],"watch-ignore":["lib/vendor"]},repository:{type:"git",url:"https://github.com/stevenvelozo/fable-serviceproviderbase.git"},keywords:["entity","behavior"],author:"Steven Velozo <steven@velozo.com> (http://velozo.com/)",license:"MIT",bugs:{url:"https://github.com/stevenvelozo/fable-serviceproviderbase/issues"},homepage:"https://github.com/stevenvelozo/fable-serviceproviderbase",devDependencies:{fable:"^3.0.143",quackage:"^1.0.33"}}},{}],2:[function(e,i,t){const s=e("../package.json");class o{constructor(e,i,t){"object"==typeof e&&e.isFable?this.connectFable(e):this.fable=!1,this._PackageFableServiceProvider=s,this.fable?(this.UUID=e.getUUID(),this.options="object"==typeof i?i:{}):(this.options="object"!=typeof e||e.isFable?"object"==typeof i?i:{}:e,this.UUID=`CORE-SVC-${Math.floor(89999*Math.random()+1e4)}`),this.serviceType=`Unknown-${this.UUID}`,this.Hash="string"==typeof t?t:this.fable||"string"!=typeof i?`${this.UUID}`:i}connectFable(e){if("object"!=typeof e||!e.isFable){let i=`Fable Service Provider Base: Cannot connect to Fable, invalid Fable object passed in.  The pFable parameter was a [${typeof e}].}`;return console.log(i),new Error(i)}return this.fable||(this.fable=e),this.log||(this.log=this.fable.Logging),this.services||(this.services=this.fable.services),this.servicesMap||(this.servicesMap=this.fable.servicesMap),!0}static isFableService=!0}i.exports=o,i.exports.CoreServiceProviderBase=o},{"../package.json":1}],3:[function(e,i,t){i.exports={name:"pict-view",version:"1.0.62",description:"Pict View Base Class",main:"source/Pict-View.js",scripts:{test:"mocha -u tdd -R spec",start:"node source/Pict-View.js",coverage:"nyc --reporter=lcov --reporter=text-lcov npm test",build:"npx quack build","docker-dev-build":"docker build ./ -f Dockerfile_LUXURYCode -t pict-view-image:local","docker-dev-run":'docker run -it -d --name pict-view-dev -p 30001:8080 -p 38086:8086 -v "$PWD/.config:/home/coder/.config"  -v "$PWD:/home/coder/pict-view" -u "$(id -u):$(id -g)" -e "DOCKER_USER=$USER" pict-view-image:local',"docker-dev-shell":"docker exec -it pict-view-dev /bin/bash",types:"tsc -p .",lint:"eslint source/**"},types:"types/source/Pict-View.d.ts",repository:{type:"git",url:"git+https://github.com/stevenvelozo/pict-view.git"},author:"steven velozo <steven@velozo.com>",license:"MIT",bugs:{url:"https://github.com/stevenvelozo/pict-view/issues"},homepage:"https://github.com/stevenvelozo/pict-view#readme",devDependencies:{"@eslint/js":"^9.28.0","browser-env":"^3.3.0",eslint:"^9.28.0",pict:"^1.0.275",quackage:"^1.0.42",typescript:"^5.8.3"},mocha:{diff:!0,extension:["js"],package:"./package.json",reporter:"spec",slow:"75",timeout:"5000",ui:"tdd","watch-files":["source/**/*.js","test/**/*.js"],"watch-ignore":["lib/vendor"]},dependencies:{fable:"^3.1.14","fable-serviceproviderbase":"^3.0.15"}}},{}],4:[function(e,i,t){const s=e("fable-serviceproviderbase"),o=e("../package.json"),n={DefaultRenderable:!1,DefaultDestinationAddress:!1,DefaultTemplateRecordAddress:!1,ViewIdentifier:!1,AutoInitialize:!0,AutoInitializeOrdinal:0,AutoRender:!0,AutoRenderOrdinal:0,AutoSolveWithApp:!0,AutoSolveOrdinal:0,CSSHash:!1,CSS:!1,CSSProvider:!1,CSSPriority:500,Templates:[],DefaultTemplates:[],Renderables:[],Manifests:{}};i.exports=class extends s{constructor(e,i,t){super(e,Object.assign({},JSON.parse(JSON.stringify(n)),i),t),this.fable,this.options,this.UUID,this.Hash,this.log,this.options.ViewIdentifier||(this.options.ViewIdentifier=`AutoViewID-${this.fable.getUUID()}`),this.serviceType="PictView",this._Package=o,this.pict=this.fable,this.AppData=this.pict.AppData,this.Bundle=this.pict.Bundle,this.initializeTimestamp=!1,this.lastSolvedTimestamp=!1,this.lastRenderedTimestamp=!1,this.lastMarshalFromViewTimestamp=!1,this.lastMarshalToViewTimestamp=!1;for(let e=0;e<this.options.Templates.length;e++){let i=this.options.Templates[e];"Hash"in i&&"Template"in i?(i.Source||(i.Source=`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`),this.pict.TemplateProvider.addTemplate(i.Hash,i.Template,i.Source)):this.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${e} in the options array.`,i)}for(let e=0;e<this.options.DefaultTemplates.length;e++){let i=this.options.DefaultTemplates[e];"Postfix"in i&&"Template"in i?(i.Source||(i.Source=`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`),this.pict.TemplateProvider.addDefaultTemplate(i.Prefix,i.Postfix,i.Template,i.Source)):this.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${e} in the options array.`,i)}if(this.options.CSS){let e=this.options.CSSHash?this.options.CSSHash:`View-${this.options.ViewIdentifier}`,i=this.options.CSSProvider?this.options.CSSProvider:e;this.pict.CSSMap.addCSS(e,this.options.CSS,i,this.options.CSSPriority)}this.renderables={};for(let e=0;e<this.options.Renderables.length;e++){let i=this.options.Renderables[e];this.addRenderable(i)}}addRenderable(e,i,t,s,o){let n;if("object"==typeof e)n=e;else{n={RenderableHash:e,TemplateHash:i,DefaultTemplateRecordAddress:t,ContentDestinationAddress:s,RenderMethod:"string"!=typeof o?o:"replace"}}"string"!=typeof n.RenderableHash||"string"!=typeof n.TemplateHash?this.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable; RenderableHash or TemplateHash are invalid.`,n):(this.pict.LogNoisiness>0&&this.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} adding renderable [${n.RenderableHash}] pointed to template ${n.TemplateHash}.`),this.renderables[n.RenderableHash]=n)}onBeforeInitialize(){return this.pict.LogNoisiness>3&&this.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeInitialize:`),!0}onBeforeInitializeAsync(e){return this.onBeforeInitialize(),e()}onInitialize(){return this.pict.LogNoisiness>3&&this.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onInitialize:`),!0}onInitializeAsync(e){return this.onInitialize(),e()}initialize(){return this.pict.LogControlFlow&&this.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize:`),this.initializeTimestamp?(this.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize called but initialization is already completed.  Aborting.`),!1):(this.onBeforeInitialize(),this.onInitialize(),this.onAfterInitialize(),this.initializeTimestamp=this.pict.log.getTimeStamp(),!0)}initializeAsync(e){if(this.pict.LogControlFlow&&this.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initializeAsync:`),this.initializeTimestamp)return this.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} async initialize called but initialization is already completed.  Aborting.`),e();{let i=this.pict.instantiateServiceProviderWithoutRegistration("Anticipate");this.pict.LogNoisiness>0&&this.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`),i.anticipate(this.onBeforeInitializeAsync.bind(this)),i.anticipate(this.onInitializeAsync.bind(this)),i.anticipate(this.onAfterInitializeAsync.bind(this)),i.wait((i=>(i&&this.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization failed: ${i.message||i}`,{stack:i.stack}),this.initializeTimestamp=this.pict.log.getTimeStamp(),this.pict.LogNoisiness>0&&this.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`),e())))}}onAfterInitialize(){return this.pict.LogNoisiness>3&&this.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterInitialize:`),!0}onAfterInitializeAsync(e){return this.onAfterInitialize(),e()}onBeforeRender(e,i,t){return this.pict.LogNoisiness>3&&this.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeRender:`),!0}onBeforeRenderAsync(e){return e()}buildRenderOptions(e,i,t){let s={Valid:!0};return s.RenderableHash="string"==typeof e?e:"string"==typeof this.options.DefaultRenderable&&this.options.DefaultRenderable,s.RenderableHash||(this.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not find a suitable RenderableHash ${s.RenderableHash} (param ${e}because it is not a valid renderable.`),s.Valid=!1),s.Renderable=this.renderables[s.RenderableHash],s.Renderable||(this.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${s.RenderableHash} (param ${e}) because it does not exist.`),s.Valid=!1),s.DestinationAddress="string"==typeof i?i:"string"==typeof s.Renderable.ContentDestinationAddress?s.Renderable.ContentDestinationAddress:"string"==typeof this.options.DefaultDestinationAddress&&this.options.DefaultDestinationAddress,s.DestinationAddress||(this.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${s.RenderableHash} (param ${e}) because it does not have a valid destination address (param ${i}).`),s.Valid=!1),"object"==typeof t?(s.RecordAddress="Passed in as object",s.Record=t):(s.RecordAddress="string"==typeof t?t:"string"==typeof s.Renderable.DefaultTemplateRecordAddress?s.Renderable.DefaultTemplateRecordAddress:"string"==typeof this.options.DefaultTemplateRecordAddress&&this.options.DefaultTemplateRecordAddress,s.Record="string"==typeof s.RecordAddress?this.pict.DataProvider.getDataByAddress(s.RecordAddress):void 0),s}assignRenderContent(e,i,t){return this.pict.ContentAssignment.projectContent(e.RenderMethod,i,t,e.TestAddress)}render(e,i,t){return this.renderWithScope(this,e,i,t)}renderWithScope(e,i,t,s){let o,n="string"==typeof i?i:"string"==typeof this.options.DefaultRenderable&&this.options.DefaultRenderable;if(!n)return this.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${n} (param ${i}) because it is not a valid renderable.`),!1;if(o="__Virtual"==n?{RenderableHash:"__Virtual",TemplateHash:this.renderables[this.options.DefaultRenderable].TemplateHash,DestinationAddress:t,RenderMethod:"virtual-assignment"}:this.renderables[n],!o)return this.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${n} (param ${i}) because it does not exist.`),!1;let r,a,h="string"==typeof t?t:"string"==typeof o.ContentDestinationAddress?o.ContentDestinationAddress:"string"==typeof this.options.DefaultDestinationAddress&&this.options.DefaultDestinationAddress;if(!h)return this.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${n} (param ${i}) because it does not have a valid destination address.`),!1;"object"==typeof s?(a=s,r="Passed in as object"):(r="string"==typeof s?s:"string"==typeof o.DefaultTemplateRecordAddress?o.DefaultTemplateRecordAddress:"string"==typeof this.options.DefaultTemplateRecordAddress&&this.options.DefaultTemplateRecordAddress,a="string"==typeof r?this.pict.DataProvider.getDataByAddress(r):void 0),this.onBeforeRender(o,h,a),this.pict.LogControlFlow&&this.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${n}] Destination[${h}] TemplateRecordAddress[${r}] render:`),this.pict.LogNoisiness>0&&this.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Render of Renderable[${n}] to Destination [${h}]...`);let l=this.pict.parseTemplateByHash(o.TemplateHash,a,null,[this],e);return this.pict.LogNoisiness>0&&this.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Assigning Renderable[${n}] content length ${l.length} to Destination [${h}] using render method [${o.RenderMethod}].`),this.pict.ContentAssignment.projectContent(o.RenderMethod,h,l,o.TestAddress),this.onAfterRender(o,h,a,l),this.lastRenderedTimestamp=this.pict.log.getTimeStamp(),!0}renderAsync(e,i,t,s){return this.renderWithScopeAsync(this,e,i,t,s)}renderWithScopeAsync(e,i,t,s,o){let n,r="string"==typeof i?i:"string"==typeof this.options.DefaultRenderable&&this.options.DefaultRenderable,a="function"==typeof o?o:"function"==typeof s?s:"function"==typeof t?t:"function"==typeof i?i:null;if(a||(this.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`),a=e=>{e&&this.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderAsync Auto Callback Error: ${e}`,e)}),!r)return this.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${r} (param ${i}because it is not a valid renderable.`),a(new Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${r} (param ${i}because it is not a valid renderable.`));if(n="__Virtual"==r?{RenderableHash:"__Virtual",TemplateHash:this.renderables[this.options.DefaultRenderable].TemplateHash,DestinationAddress:t,RenderMethod:"virtual-assignment"}:this.renderables[r],!n)return this.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${r} (param ${i}) because it does not exist.`),a(new Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${r} (param ${i}) because it does not exist.`));let h,l,c="string"==typeof t?t:"string"==typeof n.ContentDestinationAddress?n.ContentDestinationAddress:"string"==typeof this.options.DefaultDestinationAddress&&this.options.DefaultDestinationAddress;if(!c)return this.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${r} (param ${i}) because it does not have a valid destination address.`),a(new Error(`Could not render ${r}`));"object"==typeof s?(l=s,h="Passed in as object"):(h="string"==typeof s?s:"string"==typeof n.DefaultTemplateRecordAddress?n.DefaultTemplateRecordAddress:"string"==typeof this.options.DefaultTemplateRecordAddress&&this.options.DefaultTemplateRecordAddress,l="string"==typeof h?this.pict.DataProvider.getDataByAddress(h):void 0),this.pict.LogControlFlow&&this.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${r}] Destination[${c}] TemplateRecordAddress[${h}] renderAsync:`),this.pict.LogNoisiness>2&&this.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Asynchronous Render (callback-style)...`);let d,p=this.fable.newAnticipate();p.anticipate((e=>{this.onBeforeRender(n,c,l),this.onBeforeRenderAsync(e)})),p.anticipate((t=>{this.pict.parseTemplateByHash(n.TemplateHash,l,((e,s)=>e?(this.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${r} (param ${i}) because it did not parse the template.`,e),t(e)):(d=s,this.pict.LogNoisiness>0&&this.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Assigning Renderable[${r}] content length ${s.length} to Destination [${c}] using Async render method ${n.RenderMethod}.`),this.pict.ContentAssignment.projectContent(n.RenderMethod,c,s,n.TestAddress),this.lastRenderedTimestamp=this.pict.log.getTimeStamp(),t())),[this],e)})),p.anticipate((e=>{this.onAfterRender(n,c,l,d),this.onAfterRenderAsync(e)})),p.wait(a)}renderDefaultAsync(e){this.renderAsync(e)}basicRender(e,i,t){return this.basicRenderWithScope(this,e,i,t)}basicRenderWithScope(e,i,t,s){let o=this.buildRenderOptions(i,t,s);return o.Valid?(this.assignRenderContent(o.Renderable,o.DestinationAddress,this.pict.parseTemplateByHash(o.Renderable.TemplateHash,o.Record,null,[this],e)),!0):(this.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not perform a basic render of ${o.RenderableHash} because it is not valid.`),!1)}basicRenderAsync(e,i,t,s){return this.basicRenderWithScopeAsync(this,e,i,t,s)}basicRenderWithScopeAsync(e,i,t,s,o){let n="function"==typeof o?o:"function"==typeof s?s:"function"==typeof t?t:"function"==typeof i?i:null;n||(this.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} basicRenderAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`),n=e=>{e&&this.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} basicRenderAsync Auto Callback Error: ${e}`,e)});const r=this.buildRenderOptions(i,t,s);if(!r.Valid){let e=`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not perform a basic render of ${r.RenderableHash} because it is not valid.`;return this.log.error(e),n(new Error(e))}this.pict.parseTemplateByHash(r.Renderable.TemplateHash,r.Record,((e,i)=>e?(this.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${r.RenderableHash} because it did not parse the template.`,e),n(e)):(this.assignRenderContent(r.Renderable,r.DestinationAddress,i),n())),[this],e)}onAfterRender(e,i,t,s){return this.pict.LogNoisiness>3&&this.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterRender:`),!0}onAfterRenderAsync(e){return e()}onBeforeSolve(){return this.pict.LogNoisiness>3&&this.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeSolve:`),!0}onBeforeSolveAsync(e){return this.onBeforeSolve(),e()}onSolve(){return this.pict.LogNoisiness>3&&this.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onSolve:`),!0}onSolveAsync(e){return this.onSolve(),e()}solve(){return this.pict.LogNoisiness>2&&this.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`),this.onBeforeSolve(),this.onSolve(),this.onAfterSolve(),this.lastSolvedTimestamp=this.pict.log.getTimeStamp(),!0}solveAsync(e){let i=this.pict.instantiateServiceProviderWithoutRegistration("Anticipate"),t="function"==typeof e?e:null;t||(this.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} solveAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`),t=e=>{e&&this.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} solveAsync Auto Callback Error: ${e}`,e)}),i.anticipate(this.onBeforeSolveAsync.bind(this)),i.anticipate(this.onSolveAsync.bind(this)),i.anticipate(this.onAfterSolveAsync.bind(this)),i.wait((e=>(this.pict.LogNoisiness>2&&this.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`),this.lastSolvedTimestamp=this.pict.log.getTimeStamp(),t(e))))}onAfterSolve(){return this.pict.LogNoisiness>3&&this.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterSolve:`),!0}onAfterSolveAsync(e){return this.onAfterSolve(),e()}onBeforeMarshalFromView(){return this.pict.LogNoisiness>3&&this.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalFromView:`),!0}onBeforeMarshalFromViewAsync(e){return this.onBeforeMarshalFromView(),e()}onMarshalFromView(){return this.pict.LogNoisiness>3&&this.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalFromView:`),!0}onMarshalFromViewAsync(e){return this.onMarshalFromView(),e()}marshalFromView(){return this.pict.LogNoisiness>2&&this.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`),this.onBeforeMarshalFromView(),this.onMarshalFromView(),this.onAfterMarshalFromView(),this.lastMarshalFromViewTimestamp=this.pict.log.getTimeStamp(),!0}marshalFromViewAsync(e){let i=this.pict.instantiateServiceProviderWithoutRegistration("Anticipate"),t="function"==typeof e?e:null;t||(this.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalFromViewAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`),t=e=>{e&&this.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalFromViewAsync Auto Callback Error: ${e}`,e)}),i.anticipate(this.onBeforeMarshalFromViewAsync.bind(this)),i.anticipate(this.onMarshalFromViewAsync.bind(this)),i.anticipate(this.onAfterMarshalFromViewAsync.bind(this)),i.wait((e=>(this.pict.LogNoisiness>2&&this.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} marshalFromViewAsync() complete.`),this.lastMarshalFromViewTimestamp=this.pict.log.getTimeStamp(),t(e))))}onAfterMarshalFromView(){return this.pict.LogNoisiness>3&&this.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalFromView:`),!0}onAfterMarshalFromViewAsync(e){return this.onAfterMarshalFromView(),e()}onBeforeMarshalToView(){return this.pict.LogNoisiness>3&&this.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalToView:`),!0}onBeforeMarshalToViewAsync(e){return this.onBeforeMarshalToView(),e()}onMarshalToView(){return this.pict.LogNoisiness>3&&this.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalToView:`),!0}onMarshalToViewAsync(e){return this.onMarshalToView(),e()}marshalToView(){return this.pict.LogNoisiness>2&&this.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`),this.onBeforeMarshalToView(),this.onMarshalToView(),this.onAfterMarshalToView(),this.lastMarshalToViewTimestamp=this.pict.log.getTimeStamp(),!0}marshalToViewAsync(e){let i=this.pict.instantiateServiceProviderWithoutRegistration("Anticipate"),t="function"==typeof e?e:null;t||(this.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalToViewAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`),t=e=>{e&&this.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalToViewAsync Auto Callback Error: ${e}`,e)}),i.anticipate(this.onBeforeMarshalToViewAsync.bind(this)),i.anticipate(this.onMarshalToViewAsync.bind(this)),i.anticipate(this.onAfterMarshalToViewAsync.bind(this)),i.wait((e=>(this.pict.LogNoisiness>2&&this.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} marshalToViewAsync() complete.`),this.lastMarshalToViewTimestamp=this.pict.log.getTimeStamp(),t(e))))}onAfterMarshalToView(){return this.pict.LogNoisiness>3&&this.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalToView:`),!0}onAfterMarshalToViewAsync(e){return this.onAfterMarshalToView(),e()}get isPictView(){return!0}}},{"../package.json":3,"fable-serviceproviderbase":2}]},{},[4])(4)}));
//# sourceMappingURL=pict-view.min.js.map
